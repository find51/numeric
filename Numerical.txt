//1.Bisection Method
clc;			
clear all;
fx=input('Enter the Function: F(x)=','s');
f=eval(['@(x)',fx]);
a=input('Enter a=')
b=input('Enter b=')
v-b;
while (f(b)<0)
	b=a;
	a=v;
	break;
end;
s=1;
fptint('N\t	\ta\t\t		b\t\t	x\t\t 	f(x)\t\t 	Error\n');
for k=1:100;
	it(k)=abs(k);
	x(k)=(a+b)/2;
	c=f(x(k));
	fprint('%g 	%f	%f	%f	%f	%f\n',k,a,b,x(k),c,s);
	if c>0
	     b=x(k);
	else
	     a=x(k);
	end
	x(k+1)=(a+b)/2;
	s=((abs(x(k+1)-x(k)))/abs(x(k+1)))*100;
	
	if s<=0.01
		break;
	end
end
fprintf('\n\n Hence the Root is: %f',x(k));

	
//2. False Position
clc; 
clear all; 
fx=input('Enter the function ,F(x) = ','s'); 
f=eval(['@(x)',fx]) ; 
a=input('Enter a='); 
b=input('Enter b='); 
s=1; 
fprintf('N\t       \ta\t\t         b\t\t             x\t\t           f(x)\t\t\t     Error\n'); 
for k=1:100;     
    x(k)=a-(f(a)*(b-a))/(f(b)-f(a));     
    c=f(x(k));     
    fprintf('%g          %f         %f          %f          %f          %f\n',k,a,b,x(k),c,s);     
    if c>0         
	b=x(k);     
    else         
	a=x(k);     
    end     
    x(k+1)=a-(f(a)*(b-a))/(f(b)-f(a));     
    s=((abs(x(k+1)-x(k)))/abs(x(k+1)))*100; 
    if s<=.01         
	break;     
    end 
end 
 
fprintf('\n\nThe root is =%f',x(k)); 



//3. Newton Rapson Method
clc;
clear all;
fx=input('Enter the function ,F(x) = ','s');
f=eval(['@(x)',fx]) ;
fx=input('Enter the function ,F"(x) = ','s');
f1=eval(['@(x)',fx]) ;
a=input('Enter a = ');
s=1;
fprintf('N\t \tX(i)\t\t X\t\t f(x)\t\t Error\n');
for k=1:1:100
 x(k)=a-(f(a)/f1(a));
 fprintf('%g %f %f %f %f\n',k,a,x(k),f(x(k)),s);
 a=x(k);
 x(k+1)=a-(f(a)/f1(a));
 s=((abs(x(k+1)-x(k)))/abs(x(k+1)))*100;
 if s<=.0001
 break;
 end
end
fprintf('\n\nThe root is =%f',x(k))



//4. Secant Method
clc;
clear all;
fx=input('Enter the function ,F(x) = ','s');
f=eval(['@(x)',fx]) ;
a=input('Enter a=');
b=input('Enter b=');
x(1)=a;
x(2)=b;
s=1;
fprintf('N\t\t x(i-1)\t\t x(i)\t\t x(i+1)\t\t f(x)\t\t Error\n');
for k=3:103;
 it(k)=abs(k-2);
 x(k)=x(k-1)-(f(x(k-1))*(x(k-1)-x(k-2)))/(f(x(k-1))-f(x(k-2)));
 c=f(x(k));
 fprintf('%g %f %f %f %f %f\n\n',it(k),x(k-2),x(k-1),x(k),c,s);
 s=((abs(x(k)-x(k-1)))/abs(x(k)))*100;
 if s<=.001
 break;
 end
end
fprintf('\n\nThe root is =%f',x(k));




//5. Gauss Elimination Method
clc;
clear all;
a=input('Enter matrix A = ');
b=input('Enter matrix B = ');
[m,n]=size(a);
for k=1:m-1
 for i=k+1:m
  fact=a(i,k)/a(k,k);
   for j=1:n
       a(i,j)=a(i,j)-a(k,j)*fact;
   end
   b(i,1)=b(i,1)-b(k,1)*fact;
 end
end
x(m)=b(m,1)/a(m,n);
for i=m-1:-1:1
 sum=0;
 for j=i+1:n
     sum=sum+a(i,j)*x(j);
 end
 x(i)=(b(i,1)-sum)/a(i,i);
end
disp('After forward elimination the matrix [A B] :');
disp([a b]); %%Showes a &b in matrix form
fprintf('\nThe Required solution : ');
for i=1:n
fprintf('\nx(%d) = %f',i,x(i));
end



//6. Trapezoidal Rule
clc
clear all
n=input('Enter the value n= ');
h=input('Enter the value h= ');
for i=1:n+1
 f(i)=input('Enter the value f(i)= ');
end
sum=(f(1)+f(n+1))/2;
for j=2:n
 sum=sum+f(j);
end
Integral=h*sum;
Integral



//7. Simpson's 1/3 Rule:
clc
clear all
n=input('Enter the value of n= ');
h=input('Enter the value of h= ');
for i=1:n+1
 f(i)=input('Enter the value of f(i)= ');
end
 sum=(f(1)+f(n+1));
 for i=2:n
 sum=sum+4*f(i);
 end
 for i=3:n-1
 sum=sum+2*f(i)
 end
 Integral=h*(sum/3);
 Integral


//8. Runge-Kutta Method:
clc
clear all
fx=input('Enter the function ,dx/dy = ','s');
f=eval(['@(x,y)',fx]) ;
x1=input('initial value of x1= ');
y1=input('initial value of y1= ');
xp=input('input x at which y is required xp= ');
h=input('input step size h= ');
n=(xp-x1)/h;
for i=1:n
 m1=f(x1,y1);
 x2=x1+h;
 y2=y1+h*m1;
 m2=f(x2,y2);
 y2=y1+((h/2)*(m1+m2));
 x1=x2;
 y1=y2;
end
fprintf('At x=%g the value of y(%g)=%f',xp,xp,y2);
